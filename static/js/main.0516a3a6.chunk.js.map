{"version":3,"sources":["dbmanager/LocalDB.ts","components/events.ts","dbmanager/index.ts","screens/LogIn.tsx","components/StickyPaper.tsx","components/customHooks.ts","screens/ModifyQuestion.tsx","screens/Home.tsx","screens/Intro.tsx","screens/CreateQuestion.tsx","screens/CreateExam.tsx","screens/ExamQuestion.tsx","screens/ExamSummary.tsx","screens/ExamView.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["LocalDBManager","dbname","db","indexedDB","window","mozIndexedDB","webkitIndexedDB","msIndexedDB","IDBTransaction","webkitIDBTransaction","msIDBTransaction","READ_WRITE","IDBKeyRange","webkitIDBKeyRange","msIDBKeyRange","createConn","that","Promise","res","rej","req","open","onupgradeneeded","event","target","result","createObjectStore","keyPath","console","log","onerror","onsuccess","navigator","storage","persisted","then","ispersistent","persist","toByteSize","b","sizes","maxi","length","i","toFixed","space","estimate","quota","usage","used_p","descr","single","entity","id","tq","transaction","objectStore","get","e","list","attrs","type","filter","truthFn","reduce","t","k","openCursor","cursor","value","push","continue","randomId","Array","from","crypto","getRandomValues","Uint8Array","map","v","toString","padStart","join","post","data","tr","entt","isArray","forEach","el","add","oncomplete","ev","put","a","delete","key","deleteLocalDB","close","deleteDatabase","this","EventEmitter","_events","dispatch","callback","subscribe","unsubscribe","DBManager","URL","LDB","canLocal","Boolean","categories","cattree","login","apikey","reject","LocalDB","setTimeout","alert","loadCategories","isLocal","catToTree","catTree","categs","fn","cat","pos","parts","split","part","__nq","clist","flat","Set","ee","error","updateCategories","qs","indexOf","createQuestions","Error","createExam","ex","separator","find","c","qlist","qnum","idx","Math","floor","random","que","ans","qpans","resp","splice","start","Date","now","end","getQuestion","getQuestions","modifyQuestion","question","addCategoryToQuestion","ids","new_categ","qtn","modedq","getExam","getExams","saveAnswer","exam","index","answer","endExam","useCategories","useState","setCategs","useStyles","makeStyles","theme","createStyles","root","display","justifyContent","alignItems","height","halfwidth","minWidth","addpadding","paddingLeft","paddingRight","LogIn","doLogIn","classes","useTheme","React","setApiKey","err","undefined","handleLogIn","preventDefault","useEffect","className","CssBaseline","Card","variant","CardContent","noValidate","onSubmit","autoComplete","TextField","autoFocus","required","label","onChange","helperText","CardActions","Button","size","disabled","onClick","stickypaper","flexDirection","padding","StickyPaper","props","Paper","elevation","children","useStruct","initial_struct","useReducer","state","action","Object","keys","backdrop","zIndex","drawer","color","flform","margin","ModifyQuestion","setSnack","useParams","catname","qid","history","useHistory","setPersisted","search","setSearch","setQList","modTry","setCT","enun","obs","modQ","setModQ","q","replace","decodeURIComponent","handleModify","sort","status","msg","goBack","handlePersist","p","Alert","style","severity","AlertTitle","placeholder","InputProps","endAdornment","Search","overflow","Slide","direction","in","mountOnEnter","unmountOnExit","List","includes","ListItem","component","Link","button","to","encodeURIComponent","ListItemText","primary","ListItemSecondaryAction","ChevronRight","substr","Edit","Backdrop","maxHeight","Typography","multiline","Autocomplete","freeSolo","multiple","newValue","options","defaultValue","renderTags","getTagProps","option","Chip","renderInput","params","flex","maxWidth","InputAdornment","position","IconButton","aria-label","edge","Beenhere","TurnedInNot","HighlightOff","width","marginLeft","drawerWidth","title","textDecoration","appBar","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","easeOut","enteringScreen","menuButton","marginRight","spacing","hide","flexShrink","drawerPaper","drawerHeader","mixins","toolbar","content","flexGrow","contentShift","bottomnav","bottom","grow","Home","changeMode","isSmall","useMediaQuery","breakpoints","down","isDark","palette","openDrawer","setOpen","snack","handleSnackClose","reason","AppBar","Toolbar","Menu","noWrap","Tooltip","Face","Drawer","anchor","paper","ChevronLeft","Divider","NavLink","activeClassName","ListItemIcon","PlaylistAdd","AssignmentTurnedIn","PlaylistAddCheck","exact","path","ExamSummary","ExamQuestion","CreateExam","Create","ExamView","Intro","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","hideIn","onClose","BottomNavigation","showLabels","BottomNavigationAction","icon","textAlign","gutterBottom","RLink","overflowY","marginTop","file","useRef","importTry","setIT","importLoad","setIL","createTry","newQ","setNewQ","handleImport","current","files","reader","FileReader","readAsText","onload","filestr","JSON","parse","handleCreate","href","download","inputRef","InputLabelProps","shrink","inputProps","accept","alignSelf","loading","setL","startTry","setST","time","qtime","modN","setModN","randtype","newE","setNewE","handleStartExam","select","MenuItem","CircularProgress","up","questions","errdiv","fontFamily","formControl","topProgress","msToString","diff","hours","mins","secs","slice","setError","setExam","setAnswer","setResp","setQuestion","etxt","qtxt","etime","ended","setTime","startQ","interval","NaN","tellError","catch","r","txt","array","j","shuffle","isNaN","clearInterval","intv","setInterval","timeSetting","min","ceil","toggleResp","saveAnsToDB","paintResults","sep","examans","resptrue","anstrue","backgroundColor","FormControl","FormGroup","FormControlLabel","control","Checkbox","checked","name","marginBottom","Assistant","thickness","mark","counting","good","bad","empty","results","setResults","calculateMark","badp","toLocaleDateString","weekday","day","month","year","hour","minute","underline","failedqs","exams","setExams","TableContainer","Table","TableHead","TableRow","TableCell","align","TableBody","scope","Visibility","App","matchMedia","matches","darkmode","setDarkMode","useMemo","createMuiTheme","blue","secondary","deepOrange","loggedIn","setLoggedIn","ThemeProvider","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0516a3a6.chunk.js","sourcesContent":["import { Entity, Question, Exam, Space, DBImp } from '../types';\r\n\r\nexport default class LocalDBManager implements DBImp {\r\n    //https://developer.mozilla.org/en-US/docs/Web/API/IndexedDB_API/Using_IndexedDB\r\n    db?: IDBDatabase;\r\n    dbname = '';\r\n    indexedDB = window.indexedDB || (window as any).mozIndexedDB || (window as any).webkitIndexedDB || (window as any).msIndexedDB;\r\n    IDBTransaction = window.IDBTransaction || (window as any).webkitIDBTransaction || (window as any).msIDBTransaction || { READ_WRITE: \"readwrite\" };\r\n    IDBKeyRange = window.IDBKeyRange || (window as any).webkitIDBKeyRange || (window as any).msIDBKeyRange;\r\n\r\n    constructor(dbname: string) {\r\n        this.dbname = dbname;\r\n    }\r\n\r\n    createConn = () => {\r\n        let that = this;\r\n        return new Promise<string>((res, rej) => {\r\n            let req = this.indexedDB.open(this.dbname);\r\n            req.onupgradeneeded = (event: any) => {\r\n                let db = event.target?.result;\r\n                if (db) {\r\n                    db.createObjectStore(\"questions\", { keyPath: \"id\" });\r\n                    db.createObjectStore(\"exams\", { keyPath: \"id\" });\r\n                }\r\n                console.log('DB settled');\r\n            };\r\n            req.onerror = (event) => {\r\n                rej('You didn\\'t allow the app to create a Local Database');\r\n            };\r\n            req.onsuccess = (event) => {\r\n                that.db = req.result;\r\n                console.log(that.db);\r\n                navigator.storage.persisted().then(ispersistent=>{\r\n                    if (ispersistent) res('');\r\n                    else navigator.storage.persist().then(persisted=>{\r\n                        if (persisted) res('');\r\n                        else res(`Su base de datos se creó correctamente, pero se borrarà cuando cierre el navegador.\\nEn el apartado \"gestionar preguntas\" puede activar la persistencia de sus datos con el botón de guardar DB.`);\r\n                    })\r\n                });\r\n            };\r\n        });\r\n    }\r\n\r\n    toByteSize = (b: number = 0) => {\r\n        const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'ZB'],\r\n            maxi = sizes.length - 1;\r\n        let i = 0;\r\n        while (b > 1024 && i < maxi) { b /= 1024; i++; }\r\n        return b.toFixed(2) + ' ' + sizes[i];\r\n    }\r\n\r\n    space = (): Promise<Space> => navigator.storage.estimate().then(({ quota, usage }) =>\r\n        ({ used_p: (quota && usage && (usage / quota) * 100) || 0, descr: `S'han utilitzat ${this.toByteSize(usage)} de ${this.toByteSize(quota)}` }));\r\n\r\n    single = (entity: Entity, id: string) => {\r\n        let that = this;\r\n        return new Promise<Question>((res, rej) => {\r\n            let tq = that.db?.transaction(entity, \"readonly\").objectStore(entity).get(id);\r\n            if (tq) {\r\n                tq.onerror = rej;\r\n                tq.onsuccess = (e: any) => res(e.target.result);\r\n            }\r\n            else rej('Cannot open transaction');\r\n        });\r\n    }\r\n\r\n    list = (entity: Entity, attrs?: string | Array<string> | ((e: any) => boolean), type?: 'include' | 'exclude') => {\r\n        let that = this,\r\n            filter = (e: any) => e,\r\n            truthFn = (e: any) => true;\r\n        if (typeof attrs === 'function') truthFn = attrs;\r\n        else if (attrs) {\r\n            if (!type || type === 'include') {\r\n                if (typeof attrs === 'string') filter = (e: any) => e[attrs];\r\n                else filter = (e: Question) => attrs.reduce((t, k) => { t[k] = e[k]; return t; }, {} as Question);\r\n            }\r\n            else {\r\n                if (typeof attrs === 'string') filter = (e: Question) => { delete e[attrs]; return e; };\r\n                else filter = (e: Question) => attrs.reduce((t, k) => { delete t[k]; return t; }, e);\r\n            }\r\n        }\r\n        return new Promise<Array<any>>((res, rej) => {\r\n            let tq = that.db?.transaction(entity, \"readonly\").objectStore(entity);\r\n            let req = tq?.openCursor();\r\n            let result: Array<any> = [];\r\n            if (req) {\r\n                req.onerror = rej;\r\n                req.onsuccess = (e: any) => {\r\n                    let cursor = e.target.result;\r\n                    if (cursor) {\r\n                        if (truthFn(cursor.value)) result.push(filter(cursor.value));\r\n                        cursor.continue();\r\n                    }\r\n                    else res(result);\r\n                }\r\n            }\r\n            else rej('Cannot open transaction with cursor');\r\n        })\r\n    }\r\n\r\n    randomId = (length: number) => {\r\n        return Array.from(window.crypto.getRandomValues(new Uint8Array(length / 2))).map(v => v.toString(16).padStart(2, \"0\")).join('')\r\n    }\r\n\r\n    post = (entity: Entity, data: Question | Array<Question> | Exam | Array<Exam>) => {\r\n        let that = this;\r\n        return new Promise<string | null>((res, rej) => {\r\n            let tr = that.db?.transaction(entity, \"readwrite\"),\r\n                entt = tr?.objectStore(entity);\r\n\r\n            if (!tr || !entt) return rej('Error initializing transaction');\r\n\r\n            if (Array.isArray(data))\r\n                data.forEach((el: Question | Exam) => {\r\n                    if (!el.id) el.id = that.randomId(10);\r\n                    entt?.add(el)\r\n                });\r\n            else {\r\n                if (!data.id) data.id = that.randomId(10);\r\n                entt?.add(data);\r\n            }\r\n            tr.oncomplete = () => res(null);\r\n            tr.onerror = ev => rej(ev.toString());\r\n        });\r\n    }\r\n\r\n    put = async (entity: Entity, data: Question | Array<Question> | Exam | Array<Exam>) => {\r\n        let that = this;\r\n        return new Promise<string | null>((res, rej) => {\r\n            let tr = that.db?.transaction(entity, \"readwrite\"),\r\n                entt = tr?.objectStore(entity);\r\n\r\n            if (!tr || !entt) return rej('Error initializing transaction');\r\n\r\n            if (Array.isArray(data))\r\n                data.forEach((el: Question | Exam) => {\r\n                    entt?.put(el)\r\n                });\r\n            else {\r\n                entt?.put(data);\r\n            }\r\n            tr.oncomplete = () => res(null);\r\n            tr.onerror = ev => rej(ev.toString());\r\n        });\r\n    }\r\n\r\n    delete = async (key: string) => {\r\n        return null;\r\n    }\r\n\r\n    deleteLocalDB = async () => {\r\n        if (this.db) {\r\n            let that = this;\r\n            return new Promise((res, rej) => {\r\n                that.db?.close();\r\n                let t = that.indexedDB.deleteDatabase(that.dbname)\r\n                t.onsuccess = res;\r\n                t.onerror = rej;\r\n            });\r\n        }\r\n        return false;\r\n    }\r\n}","export const EventEmitter = {\r\n    _events: {} as any,\r\n  dispatch(event: string, data?: any) {\r\n    if (!this._events[event]) return;\r\n    this._events[event].forEach((callback:(data: any) => any) => callback(data))\r\n  },\r\n  subscribe(event:string, callback: (data: any) => any) {\r\n    if (!this._events[event]) this._events[event] = [];\r\n    this._events[event].push(callback);\r\n  },\r\n  unsubscribe(event: string) {\r\n    if (!this._events[event]) return;\r\n    delete this._events[event];\r\n  }\r\n}","import LocalDB from './LocalDB';\r\nimport { Question, Exam, DBImp, CatTree } from '../types';\r\nimport { useState } from 'react';\r\nimport { EventEmitter as ee } from '../components/events';\r\n\r\nclass MainDBManager {\r\n\r\n    private URL = 'http://example.com/example';\r\n    private LDB = 'examinatordb';\r\n\r\n    db?: DBImp;\r\n    canLocal = Boolean(window.indexedDB);\r\n\r\n    //On-memory variables\r\n    categories?: Array<string>;\r\n    cattree?: CatTree;\r\n\r\n    login = async (apikey: string): Promise<string> => {\r\n        if (apikey === 'local') {\r\n            if (!this.canLocal)\r\n                return Promise.reject('No se puede conectar a la base de datos local... Prueba otro navegador.');\r\n            this.db = new LocalDB(this.LDB);\r\n        }\r\n        else {\r\n            //this.db = new WebDBManager(this.URL);\r\n            return Promise.reject('Not Implemented');\r\n        }\r\n        let result = await this.db?.createConn();\r\n        if (result) setTimeout(()=>alert(result),500);\r\n        this.loadCategories();\r\n        return '';\r\n    }\r\n\r\n    isLocal = () => this.db && this.db instanceof LocalDB;\r\n\r\n    catToTree = (catTree: CatTree, categs: string | Array<string>) => {\r\n        const fn = (cat: string) => {\r\n            let pos = catTree,\r\n                parts = cat.split('/');\r\n            if (parts.length === 0) return;\r\n            parts.forEach(part => {\r\n                if (!pos[part]) pos[part] = { __nq: 0 };\r\n                pos = pos[part] as CatTree;\r\n            });\r\n            pos.__nq += 1;\r\n        };\r\n        if (Array.isArray(categs)) categs.forEach(fn);\r\n        else fn(categs);\r\n    }\r\n\r\n    loadCategories = async (): Promise<Array<string>> => {\r\n        if (!this.db) return [];\r\n        try {\r\n            let clist = await this.db.list(\"questions\", 'cat');\r\n            //console.log('CLIST: ', clist);\r\n            this.cattree = { __nq: 0 };\r\n            if (clist.length > 0) {\r\n                clist = clist.flat();\r\n                this.categories = [...new Set(clist)] as Array<string>;\r\n                this.catToTree(this.cattree, clist);\r\n            }\r\n            else this.categories = [];\r\n            ee.dispatch('categories');\r\n\r\n        } catch (e) {\r\n            console.error('loadCategories', e);\r\n        }\r\n        return [];\r\n    };\r\n\r\n    updateCategories = async (qs: Question | Array<Question>): Promise<void> => {\r\n        if (!Array.isArray(qs)) qs = [qs];\r\n        if (!this.categories){ \r\n            this.categories = [];\r\n            this.cattree = { __nq: 0 };\r\n        }\r\n        qs.forEach((el: Question) => el.cat.forEach(cat => {\r\n            if (!this.categories || !this.cattree) return;\r\n            else if (this.categories.indexOf(cat) === -1) {\r\n                this.categories.push(cat);\r\n                this.catToTree(this.cattree, cat);\r\n            }\r\n        }));\r\n        ee.dispatch('categories');\r\n    }\r\n\r\n    createQuestions = async (qs: Question | Array<Question>) => {\r\n        if (!qs || qs?.length === 0) return 'No elements to create';\r\n        let error = await this.db?.post(\"questions\", qs);\r\n        if (error) throw new Error(error);\r\n        else await this.updateCategories(qs);\r\n    }\r\n\r\n    createExam = async (ex: Exam) => {\r\n        console.log('Exam: ', ex);\r\n        const separator = '|ç|',\r\n            categs = separator+ex.cat.join(separator);\r\n        //Especifiquem les preguntes\r\n        let qlist = await this.db?.list(\"questions\", (qs: Question) => {\r\n            return !!qs.cat.find((c: string) => categs.indexOf(separator + c) !== -1);\r\n        });\r\n        if (!qlist) throw new Error('Problema con la DB al obtener preguntas');\r\n        else if (qlist.length < ex.qnum)\r\n            throw new Error('No hay suficientes preguntas en las categorias seleccionadas.\\nSelecciona más categorias o introduce más preguntas.');\r\n        else {\r\n            let idx = 0;\r\n            for (let i = 0; i < ex.qnum; i++) {\r\n                idx = Math.floor(Math.random() * qlist.length);\r\n                ex.que.push(qlist[idx].id);\r\n                ex.ans.push(qlist[idx].ans);\r\n                ex.qpans.push(qlist[idx].resp.length);\r\n                ex.res.push(\"\");\r\n                qlist.splice(idx, 1);\r\n            }\r\n        }\r\n        //Obtenim l'id ara ja, per poder-lo retornar després\r\n        ex.id = this.db?.randomId(30) || \"\";\r\n        //Establim el temps\r\n        ex.start = Date.now() + 1000; //Afegim un segon per a processar-lo.\r\n        ex.end = 0; //0 -> no ha acabat, >0 -> ha acabat per l'usuari, timestamp UNIX\r\n        //Ho passem a la DB\r\n        let error = await this.db?.post(\"exams\", ex);\r\n        if (error) throw new Error(error);\r\n        return ex.id;\r\n    }\r\n    \r\n    getQuestion = (id:string) => {\r\n        if (!this.db) throw 'No DB Connection';\r\n        return this.db.single(\"questions\",id) as Promise<Question>;\r\n    }\r\n\r\n    getQuestions = (cat:string) => {\r\n        if (!this.db) throw 'No DB Connection';\r\n        return this.db.list(\"questions\",e=>e.cat.indexOf(cat) !== -1) as Promise<Question[]>;\r\n    }\r\n\r\n    modifyQuestion = (question:Question) => {\r\n        if (!this.db) throw 'No DB Connection';\r\n        this.db.put(\"questions\",question);\r\n    }\r\n\r\n    addCategoryToQuestion = async (ids:string[],new_categ:string) =>{\r\n        if (!this.db) throw 'No DB Connection';\r\n        let qtn = null, modedq:Question[] = [];\r\n        for(let i=0;i<ids.length;i++){\r\n            qtn = await this.db?.single(\"questions\",ids[i]) as Question;\r\n            if (qtn && qtn.cat.indexOf(new_categ) === -1){\r\n                qtn.cat.push(new_categ);\r\n                modedq.push(qtn);\r\n            }\r\n        }\r\n        if (modedq.length > 0) this.db.put(\"questions\",modedq);\r\n    }\r\n\r\n    getExam = async (id: string) => {\r\n        if (!this.db) throw 'No DB Connection';\r\n        return this.db.single(\"exams\",id) as Promise<Exam>;\r\n    }\r\n\r\n    getExams = async () => {\r\n        if (!this.db) throw 'No DB Connection';\r\n        return this.db.list(\"exams\") as Promise<Exam[]>;\r\n    }\r\n\r\n    saveAnswer = async (exam:Exam,index:number,answer:string)=>{\r\n        if (!this.db) throw 'No DB Connection';\r\n        exam.res[index] = answer;\r\n        return this.db.put(\"exams\",exam);\r\n    }\r\n\r\n    endExam = async (exam:Exam)=>{\r\n        if (!this.db) throw 'No DB Connection';\r\n        exam.end = Date.now();\r\n        return this.db.put(\"exams\",exam);\r\n    }\r\n}\r\n\r\nexport const DBManager = new MainDBManager();\r\nexport function useCategories() {\r\n    const [categs, setCategs] = useState(DBManager.categories);\r\n\r\n    ee.subscribe('categories', () => setCategs(DBManager.categories));\r\n\r\n    return categs;\r\n}\r\nexport function useCategTree() {\r\n    const [categs, setCategs] = useState(DBManager.cattree);\r\n\r\n    ee.subscribe('categories', () => setCategs(DBManager.cattree));\r\n\r\n    return categs;\r\n}","\r\nimport React from 'react';\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport { DBManager } from '../dbmanager';\r\nimport { Button, Card, CardActions, CardContent, createStyles, makeStyles, TextField, Theme } from '@material-ui/core';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => createStyles({\r\n    root: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        height: '100vh'\r\n    },\r\n    halfwidth: { minWidth: '50vw' },\r\n    addpadding: {\r\n        paddingLeft: 16,\r\n        paddingRight: 16\r\n    }\r\n}));\r\n\r\ntype LogInProps = {\r\n    doLogIn: (apikey: string) => Promise<string>\r\n}\r\n\r\nexport default function LogIn({ doLogIn }: LogInProps) {\r\n\r\n    const classes = useStyles(useTheme()),\r\n        { canLocal } = DBManager,\r\n        [apikey, setApiKey] = React.useState<string | undefined>(),\r\n        err = apikey !== undefined && !apikey;\r\n\r\n    const handleLogIn = async (e: React.FormEvent) => {\r\n        e.preventDefault();\r\n        if (!apikey)\r\n            return setApiKey(\"\");\r\n        const result: string = await doLogIn(apikey);\r\n        if (result) {\r\n            console.log(result);\r\n            setApiKey(\"\");\r\n        }\r\n    }\r\n    React.useEffect(() => { doLogIn('local'); }, []); //Quan tinguem servidor treiem això\r\n    return (\r\n        <div className={classes.root}>\r\n            <CssBaseline />\r\n            <Card variant=\"outlined\">\r\n                <CardContent>\r\n                    <form noValidate onSubmit={handleLogIn} autoComplete=\"off\">\r\n                        <TextField\r\n                            autoFocus\r\n                            required\r\n                            error={err}\r\n                            id=\"outlined-error-helper-text\"\r\n                            label=\"Api Key\"\r\n                            onChange={e => setApiKey(e.target.value)}\r\n                            className={classes.halfwidth}\r\n                            helperText={err ? \"Incorrect entry.\" : \"\"}\r\n                            variant=\"outlined\"\r\n                        />\r\n                    </form>\r\n                </CardContent>\r\n                <CardActions className={classes.addpadding}>\r\n                    <Button size=\"small\" disabled={!apikey} onClick={handleLogIn}>Connect!</Button>\r\n                    <Button size=\"small\" disabled={!canLocal} onClick={() => doLogIn('local')}>Local</Button>\r\n                </CardActions>\r\n            </Card>\r\n        </div>\r\n    );\r\n}\r\n","import { Paper, PaperProps, createStyles, makeStyles, Theme } from '@material-ui/core';\r\nimport React from 'react';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => createStyles({\r\n    stickypaper : {\r\n        display: 'flex', \r\n        flexDirection: 'column', \r\n        padding: '5vh 5vw'\r\n    }\r\n}));\r\n\r\nexport default function StickyPaper(props:PaperProps){\r\n    const classes = useStyles();\r\n    return <Paper {...props} className={classes.stickypaper+(props.className ? ' '+props.className : '')} elevation={props.elevation || 3}>{props.children}</Paper>\r\n}","import React from 'react';\r\n\r\nexport function useStruct(initial_struct:any){\r\n    const reducer = (state:any,action:any)=>{\r\n        //return { ...state, ...action };\r\n        let result:any = {};\r\n        if (action === null) return { ...initial_struct };\r\n        Object.keys(state).forEach((k:string)=>{\r\n            if (typeof action[k] === 'function'){\r\n                if (Array.isArray(state[k])) result[k] = [...state[k]];\r\n                else if (typeof state[k] === 'object') result[k] = { ...state[k] };\r\n                action[k](result[k]);\r\n            }\r\n            else result[k] = action[k] ?? state[k];\r\n        });\r\n        return result;\r\n    }\r\n    return React.useReducer(reducer,initial_struct);\r\n}","import { Button, createStyles, makeStyles, TextField, Theme, Typography, Chip, FormControl, IconButton, InputAdornment, InputLabel, OutlinedInput, Backdrop, List, ListItem, ListItemSecondaryAction, ListItemText, Slide } from '@material-ui/core';\r\nimport React, { useEffect } from 'react';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport StickyPaper from '../components/StickyPaper';\r\nimport { DBManager, useCategories } from '../dbmanager';\r\nimport { Question } from '../types';\r\nimport { useStruct } from '../components/customHooks';\r\nimport { HighlightOff, Beenhere, TurnedInNot, Search, ChevronRight, Edit } from '@material-ui/icons';\r\nimport { useParams, Link, useHistory } from 'react-router-dom';\r\nimport { Alert, AlertTitle } from '@material-ui/lab';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => createStyles({\r\n    root: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        flexDirection: 'column',\r\n        height: '100'\r\n    },\r\n    backdrop: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        color: '#fff',\r\n    },\r\n    flform: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        margin: '10px 0',\r\n        '&>.with-margin>*': {\r\n            margin: 10\r\n        },\r\n        '&>:not(.with-margin)': {\r\n            margin: 10\r\n        }\r\n    }\r\n}));\r\n\r\nexport default function ModifyQuestion({ setSnack }: { setSnack: React.Dispatch<any> }) {\r\n    const classes = useStyles(),\r\n        categories = useCategories(),\r\n        { catname, qid } = useParams<{ catname: string, qid: string }>(),\r\n        history = useHistory(),\r\n        [persisted, setPersisted] = React.useState(true),\r\n        [search, setSearch] = React.useState(''),\r\n        [qlist, setQList] = React.useState<Question[]>([]),\r\n        [modTry, setCT] = React.useState(false),\r\n        [modQ, setModQ] = useStruct({ id: '', enun: '', cat: [], resp: [], ans: [], obs: '' });\r\n\r\n    useEffect(() => {\r\n        navigator.storage.persisted().then(setPersisted);\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (qid) { //Hi ha pregunta, mostrem backdrop\r\n            DBManager.getQuestion(qid)\r\n                .then((q: any) => {\r\n                    if (!q) return history.replace('/preguntas/gestionar/' + catname);\r\n                    q.ans = q.ans.split('|').map((a: string) => +a);\r\n                    console.log(q);\r\n                    setModQ(q);\r\n                });\r\n        }\r\n        if (catname) {\r\n            setSearch('');\r\n            DBManager.getQuestions(decodeURIComponent(catname))\r\n                .then(list => {\r\n                    if (!list || list.length === 0) return history.replace('/preguntas/gestionar');\r\n                    setQList(list);\r\n                });\r\n        }\r\n        else setQList([]);\r\n    }, [catname, qid]);\r\n\r\n    const handleModify = async (e: React.FormEvent) => {\r\n        e.preventDefault();\r\n        setCT(true);\r\n        try {\r\n            if (modQ && modQ.id && modQ.enun && modQ.cat.length > 0 && modQ.resp.length > 0 && modQ.ans.length > 0) {\r\n                console.log(modQ);\r\n                modQ.ans = modQ.ans.sort((a: number, b: number) => a - b).join(\"|\");\r\n                await DBManager.modifyQuestion(modQ);\r\n                setSnack({ open: true, status: 'success', msg: 'Pregunta modificada!' });\r\n                setModQ({ id: '' });\r\n                history.goBack();\r\n            }\r\n        }\r\n        catch (e) { setSnack({ open: true, status: 'error', msg: 'Error: ' + e.toString() }); }\r\n        setCT(false);\r\n    }\r\n\r\n    const handlePersist = async () => {\r\n        try {\r\n            let p = await navigator.storage.persisted();\r\n            if (!p)\r\n                p = await navigator.storage.persist();\r\n\r\n            setPersisted(p);\r\n            if (p) setSnack({ open: true, status: 'success', msg: 'DB Guardada!' });\r\n            else setSnack({ open: true, status: 'error', msg: 'No se pudo persistir!' });\r\n        }\r\n        catch (e) { setSnack({ open: true, status: 'error', msg: 'Error al persistir DB: ' + e.toString() }); }\r\n    }\r\n\r\n    return (<div className={classes.root}>\r\n        {\r\n            !persisted && (<Alert style={{ margin: 10 }} severity=\"warning\" action={<Button color=\"inherit\" size=\"small\" onClick={handlePersist}>Persistir</Button>}>\r\n                <AlertTitle>Cuidado!</AlertTitle>\r\n            Tus preguntas y examenes <strong>no se van a guardar</strong> si apagas el navegador ya que la base de datos en tu navegador no es persistente.\r\n                <br />Para permitir que se guarde pulsa el botón \"Persistir\".\r\n                <br /><strong>Si estas en Chrome, tendrás que guardar la pagina como dirección de interés para que funcione.</strong>\r\n            </Alert>)\r\n        }\r\n        <StickyPaper style={{ minWidth: '50%' }}>\r\n            <TextField\r\n                value={search}\r\n                onChange={e => setSearch(e.target.value)}\r\n                variant=\"outlined\"\r\n                placeholder={'Busca '+(catname ? 'preguntas' : 'categorias')}\r\n                InputProps={{\r\n                    endAdornment: <Search />,\r\n                }}\r\n            />\r\n            <div style={{ overflow: 'hidden' }}>\r\n                <Slide direction=\"right\" in={qlist.length === 0} mountOnEnter unmountOnExit>\r\n                    <List>\r\n                        {categories?.filter(c => c.includes(search)).map((c, i) => (\r\n                            <ListItem key={i} component={Link} button to={'/preguntas/gestionar/' + encodeURIComponent(c)}>\r\n                                <ListItemText primary={c} />\r\n                                <ListItemSecondaryAction>\r\n                                    <ChevronRight />\r\n                                </ListItemSecondaryAction>\r\n                            </ListItem>))}\r\n                    </List>\r\n                </Slide>\r\n                <Slide direction=\"left\" in={qlist.length > 0} mountOnEnter unmountOnExit>\r\n                    <List>\r\n                        {qlist.filter(q => q.enun.includes(search)).map((q, i) => (\r\n                            <ListItem key={i} component={Link} button to={`/preguntas/gestionar/${catname}/${encodeURIComponent(q.id)}`}>\r\n                                <ListItemText primary={q.enun.length > 100 ? q.enun.substr(0, 100) + '...' : q.enun} />\r\n                                <ListItemSecondaryAction>\r\n                                    <Edit />\r\n                                </ListItemSecondaryAction>\r\n                            </ListItem>))}\r\n                    </List>\r\n                </Slide>\r\n            </div>\r\n        </StickyPaper>\r\n        { qid && modQ.id &&\r\n            <Backdrop className={classes.backdrop} open>\r\n                <StickyPaper style={{ maxHeight: '100%', overflow: 'auto' }}>\r\n                    <form id=\"create-form\" className={classes.flform} noValidate onSubmit={handleModify} autoComplete=\"off\">\r\n                        <Typography variant=\"h6\">Modificación de pregunta</Typography>\r\n                        <TextField\r\n                            required multiline\r\n                            error={modTry && !modQ.enun}\r\n                            label=\"Enunciado\"\r\n                            value={modQ.enun}\r\n                            onChange={e => setModQ({ enun: e.target.value })}\r\n                            //className={classes.halfwidth}\r\n                            helperText={modTry && !modQ.enun ? \"Un problema necessita su enunciado\" : \"\"}\r\n                            variant=\"outlined\"\r\n                        />\r\n                        <Autocomplete\r\n                            freeSolo multiple\r\n                            value={modQ.cat}\r\n                            onChange={(event: any, newValue: Array<string>) => {\r\n                                setModQ({ cat: newValue });\r\n                            }}\r\n                            options={categories || []}\r\n                            defaultValue={[]}\r\n                            style={{ display: 'flex' }}\r\n                            renderTags={(value: string[], getTagProps: any) =>\r\n                                value.map((option: string, index: number) => (\r\n                                    <Chip variant=\"outlined\" label={option} {...getTagProps({ index })} />\r\n                                ))\r\n                            }\r\n                            renderInput={(params) => (\r\n                                <TextField {...params}\r\n                                    variant=\"outlined\"\r\n                                    label=\"Categorias\"\r\n                                    style={{ flex: '1', maxWidth: '100%' }}\r\n                                    multiline\r\n                                    error={modTry && modQ.cat.length === 0}\r\n                                    helperText={modTry && modQ.cat.length === 0 ? \"Introduce al menos una categoria\" : \"\"}\r\n                                />\r\n                            )}\r\n                        />\r\n                        {modQ.resp.map((el: any, i: number) => (<TextField\r\n                            key={i}\r\n                            required multiline\r\n                            label={\"Respuesta \" + (i + 1)}\r\n                            variant=\"outlined\" size=\"small\"\r\n                            value={el}\r\n                            onChange={e => setModQ({ resp: (resp: any) => resp[i] = e.target.value })}\r\n                            error={modTry && !el}\r\n                            helperText={modTry && !el ? \"No pueden haber respuestas vacias! Si no te gusta, elimínala\" : \"\"}\r\n                            InputProps={{\r\n                                endAdornment:\r\n                                    (<InputAdornment position=\"end\">\r\n                                        <IconButton\r\n                                            aria-label=\"Marcar como respuesta correcta\"\r\n                                            onClick={() => setModQ({\r\n                                                ans: (ans: any) => {\r\n                                                    let pos = ans.indexOf(i);\r\n                                                    pos === -1 ? ans.push(i) : ans.splice(pos, 1);\r\n                                                }\r\n                                            })}\r\n                                            edge=\"start\"\r\n                                        >\r\n                                            {modQ.ans.indexOf(i) !== -1 ? <Beenhere style={{ color: '#00c100' }} /> : <TurnedInNot />}\r\n                                        </IconButton>\r\n                                        <IconButton\r\n                                            aria-label=\"Eliminar respuesta\"\r\n                                            onClick={() => setModQ({\r\n                                                ans: (ans: any) => {\r\n                                                    let pos = ans.indexOf(i);\r\n                                                    pos !== -1 && ans.splice(pos, ans.index);\r\n                                                },\r\n                                                resp: (resp: any) => resp.splice(i, 1)\r\n                                            })}\r\n                                            edge=\"end\"\r\n                                        >\r\n                                            <HighlightOff />\r\n                                        </IconButton>\r\n                                    </InputAdornment>)\r\n                            }}\r\n                        />))}\r\n                        <Button variant=\"outlined\"\r\n                            color=\"primary\"\r\n                            style={{ width: 'fit-content', margin: 10 }}\r\n                            onClick={() => setModQ({ resp: (resp: any) => resp.push(\"\") })}>\r\n                            Añadir respuesta\r\n                        </Button>\r\n                        <TextField\r\n                            multiline\r\n                            label=\"Observaciones\"\r\n                            value={modQ.obs}\r\n                            onChange={e => setModQ({ obs: e.target.value })}\r\n                            variant=\"outlined\"\r\n                        />\r\n                        <div>\r\n                            <Button type=\"submit\" variant=\"contained\" color=\"primary\" style={{ width: 'fit-content' }}>Modificar</Button>\r\n                            <Button color=\"secondary\" onClick={history.goBack} style={{ width: 'fit-content', marginLeft: 10 }}>Cancelar</Button>\r\n                        </div>\r\n                    </form>\r\n                </StickyPaper>\r\n            </Backdrop>}\r\n    </div>);\r\n}","import React from 'react';\r\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\r\nimport { useTheme } from '@material-ui/core/styles';\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport { AppBar, BottomNavigation, BottomNavigationAction, createStyles, Divider, Drawer, IconButton, List, ListItem, ListItemIcon, ListItemText, makeStyles, Snackbar, Theme, Toolbar, Tooltip, Typography } from '@material-ui/core';\r\nimport { PlaylistAddCheck, PlaylistAdd, AssignmentTurnedIn, Menu, ChevronLeft, ChevronRight, Face } from '@material-ui/icons';\r\nimport { HashRouter as Router, Switch, Route, NavLink, Link } from \"react-router-dom\";\r\nimport { Intro, CreateQuestion, CreateExam, ExamQuestion, ExamSummary, ExamView } from '.';\r\nimport { Alert } from '@material-ui/lab';\r\nimport ModifyQuestion from './ModifyQuestion';\r\n\r\nconst drawerWidth = 240;\r\nconst useStyles = makeStyles((theme: Theme) => createStyles({\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    title: {\r\n        color: 'inherit',\r\n        textDecoration: 'none'\r\n    },\r\n    appBar: {\r\n        transition: theme.transitions.create(['margin', 'width'], {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n    },\r\n    appBarShift: {\r\n        width: `calc(100% - ${drawerWidth}px)`,\r\n        marginLeft: drawerWidth,\r\n        transition: theme.transitions.create(['margin', 'width'], {\r\n            easing: theme.transitions.easing.easeOut,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n    },\r\n    menuButton: {\r\n        marginRight: theme.spacing(2),\r\n    },\r\n    hide: {\r\n        display: 'none',\r\n    },\r\n    drawer: {\r\n        width: drawerWidth,\r\n        flexShrink: 0,\r\n    },\r\n    drawerPaper: {\r\n        width: drawerWidth,\r\n    },\r\n    drawerHeader: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        padding: theme.spacing(0, 1),\r\n        // necessary for content to be below app bar\r\n        ...theme.mixins.toolbar,\r\n        justifyContent: 'flex-end',\r\n    },\r\n    content: {\r\n        flexGrow: 1,\r\n        maxWidth: '100%',\r\n        padding: theme.spacing(2),\r\n        transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.sharp,\r\n            duration: theme.transitions.duration.leavingScreen,\r\n        }),\r\n        marginLeft: -drawerWidth,\r\n    },\r\n    contentShift: {\r\n        transition: theme.transitions.create('margin', {\r\n            easing: theme.transitions.easing.easeOut,\r\n            duration: theme.transitions.duration.enteringScreen,\r\n        }),\r\n        marginLeft: 0,\r\n    },\r\n    bottomnav: {\r\n        position: 'fixed',\r\n        bottom: 0,\r\n        width: '100%',\r\n        display: 'flex',\r\n        ...theme.mixins.toolbar,\r\n    },\r\n    grow: {\r\n        flexGrow: 1,\r\n    }\r\n}));\r\n\r\n\r\ntype HomeProps = {\r\n    changeMode: React.Dispatch<React.SetStateAction<boolean>>\r\n}\r\n\r\nexport default function Home({ changeMode }: HomeProps) {\r\n\r\n    const theme = useTheme(),\r\n        isSmall = useMediaQuery(theme.breakpoints.down(\"sm\")),\r\n        isDark = theme.palette.type === 'dark',\r\n        [openDrawer, setOpen] = React.useState(false),\r\n        [snack, setSnack] = React.useState<any>({ open: false }),\r\n        classes = useStyles();\r\n\r\n    const handleSnackClose = (event?: React.SyntheticEvent, reason?: string) => {\r\n        if (reason === 'clickaway') return;\r\n        setSnack({ open: false });\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <CssBaseline />\r\n            <Router>\r\n                <AppBar\r\n                    position=\"fixed\"\r\n                    className={classes.appBar + (openDrawer && !isSmall ? ' ' + classes.appBarShift : '')}\r\n                >\r\n                    <Toolbar>\r\n                        <IconButton\r\n                            color=\"inherit\"\r\n                            aria-label=\"open drawer\"\r\n                            onClick={() => setOpen(true)}\r\n                            edge=\"start\"\r\n                            className={classes.menuButton + (openDrawer || isSmall ? ' ' + classes.hide : '')}\r\n                        >\r\n                            <Menu />\r\n                        </IconButton>\r\n                        <Link to=\"/\" className={classes.title}><Typography variant=\"h6\" noWrap>&#128175; Examinator Γ! &#128175;</Typography></Link>\r\n                        <div className={classes.grow} />\r\n                        <Tooltip title=\"Cambia Tema\">\r\n                            <IconButton\r\n                                color=\"default\"\r\n                                edge=\"start\"\r\n                                onClick={() => changeMode(!isDark)}\r\n                            >\r\n                                <span>{isDark ? '🌞' : '🌜'}</span>\r\n                            </IconButton>\r\n                        </Tooltip>\r\n                        <Tooltip title=\"Mis Cosas\">\r\n                            <Link to=\"/yo\">\r\n                                <IconButton\r\n                                    color=\"default\"\r\n                                    edge=\"end\"\r\n                                >\r\n                                    <Face />\r\n                                </IconButton>\r\n                            </Link>\r\n                        </Tooltip>\r\n                    </Toolbar>\r\n                </AppBar>\r\n                <Drawer\r\n                    className={classes.drawer}\r\n                    variant=\"persistent\"\r\n                    anchor=\"left\"\r\n                    open={openDrawer && !isSmall}\r\n                    classes={{\r\n                        paper: classes.drawerPaper,\r\n                    }}\r\n                >\r\n                    <div className={classes.drawerHeader}>\r\n                        <IconButton onClick={() => setOpen(false)}>\r\n                            {theme.direction === 'ltr' ? <ChevronLeft /> : <ChevronRight />}\r\n                        </IconButton>\r\n                    </div>\r\n                    <Divider />\r\n                    <List>\r\n                        <ListItem button component={NavLink} to=\"/preguntas/crear\" activeClassName=\"Mui-selected\">\r\n                            <ListItemIcon><PlaylistAdd /></ListItemIcon>\r\n                            <ListItemText primary={\"Crear Preguntas\"} />\r\n                        </ListItem>\r\n                        <ListItem button component={NavLink} to=\"/examen\" activeClassName=\"Mui-selected\">\r\n                            <ListItemIcon><AssignmentTurnedIn /></ListItemIcon>\r\n                            <ListItemText primary={\"Hacer Examen\"} />\r\n                        </ListItem>\r\n                        <ListItem button component={NavLink} to=\"/preguntas/gestionar\" activeClassName=\"Mui-selected\">\r\n                            <ListItemIcon><PlaylistAddCheck /></ListItemIcon>\r\n                            <ListItemText primary={\"Gestionar Preguntas\"} />\r\n                        </ListItem>\r\n                    </List>\r\n                </Drawer>\r\n\r\n                <main className={classes.content + (openDrawer && !isSmall ? ' ' + classes.contentShift : '')}>\r\n                    <div className={classes.drawerHeader} />\r\n                    <Switch>\r\n                        <Route exact path=\"/examen/:id\">\r\n                            <ExamSummary setSnack={setSnack} />\r\n                        </Route>\r\n                        <Route exact path=\"/examen/:id/:index\">\r\n                            <ExamQuestion setSnack={setSnack} />\r\n                        </Route>\r\n                        <Route path=\"/examen\">\r\n                            <CreateExam setSnack={setSnack} />\r\n                        </Route>\r\n                        <Route path=\"/preguntas/crear\">\r\n                            <CreateQuestion isSmall={isSmall} setSnack={setSnack} />\r\n                        </Route>\r\n                        <Route path=\"/preguntas/gestionar/:catname?/:qid?\">\r\n                            <ModifyQuestion setSnack={setSnack} />\r\n                        </Route>\r\n                        <Route path=\"/yo\">\r\n                            <ExamView setSnack={setSnack} />\r\n                        </Route>\r\n                        <Route path=\"/\">\r\n                            <Intro />\r\n                        </Route>\r\n                    </Switch>\r\n                    {isSmall && <div className={classes.drawerHeader} />}\r\n                </main>\r\n                <Snackbar open={snack.open} \r\n                    anchorOrigin={{ vertical: 'bottom', horizontal: 'left' }}\r\n                    autoHideDuration={snack.hideIn || 4000} \r\n                    onClose={snack.onClose || handleSnackClose}>\r\n                    <Alert onClose={snack.onClose || handleSnackClose} severity={snack.status || \"info\"}>{snack.msg}</Alert>\r\n                </Snackbar>\r\n                {isSmall &&\r\n                    (<BottomNavigation className={classes.bottomnav} showLabels>\r\n                        <BottomNavigationAction component={NavLink} to=\"/preguntas/crear\" activeClassName=\"Mui-selected\" value=\"preguntas\" label=\"Crear P\" icon={<PlaylistAdd />} />\r\n                        <BottomNavigationAction component={NavLink} to=\"/examen\" activeClassName=\"Mui-selected\" value=\"examen\" label=\"Examen\" icon={<AssignmentTurnedIn />} />\r\n                        <BottomNavigationAction component={NavLink} to=\"/preguntas/gestionar\" activeClassName=\"Mui-selected\" value=\"preguntas\" label=\"Gestionar P\" icon={<PlaylistAddCheck />} />\r\n                    </BottomNavigation>)}\r\n            </Router>\r\n        </div>\r\n    );\r\n}\r\n","import { Typography, Link } from '@material-ui/core';\r\nimport React from 'react';\r\nimport StickyPaper from '../components/StickyPaper';\r\nimport { Link as RLink } from 'react-router-dom';\r\n\r\nexport default function Intro() {\r\n    return (<div>\r\n        <Typography variant=\"h4\" style={{ textAlign: 'center' }} gutterBottom>Bienvenidos al EXAMINATOR! </Typography>\r\n        <Typography variant=\"subtitle1\" style={{ textAlign: 'center' }} gutterBottom>Examinator es una herramienta para autoevaluarte de la forma que más te guste! Si eres nuevo a la plataforma, solo tienes que seguir los siguientes pasos: </Typography>\r\n        <ol>\r\n        <li><Typography variant=\"body1\" gutterBottom>Introduce tus preguntas (o importalas en formato JSON, de la forma que sigue) en el apartado <Link component={RLink} to=\"/preguntas/crear\">Crear Preguntas</Link></Typography></li>\r\n        <div>\r\n            <StickyPaper style={{ margin:'10px 0', overflowY:'auto', maxWidth:'100%', padding: 10, display: 'inline-flex' }}>\r\n                <pre style={{ margin:0 }}>\r\n                    {`[{\r\n    \"enun\": \"Aqui se escribe la pregunta, lo has entendido?\",\r\n    \"cat\":[\"Prueba1/Sociologia\",\"Biologia\",\"CatPadre/CatHijo\"],\r\n    \"resp\": [\"Respuesta1\",\"Respuesta2\",\"Respuesta3\",\"Si que lo he entendido\",\"No lo he entendido\"],\r\n    \"ans\": [\"Si que lo he entendido\",\"Respuesta2\"],\r\n    \"obs\": \"Se seleccionan las respuestas especificadas porque hemos entendido el concepto.\"\r\n},\r\n{\r\n    \"enun\": \"Segunda pregunta: 2+2?\",\r\n    \"cat\":[\"Prueba2/Matematicas\",\"CatPadre/CatHijo\",\"CatAbuelo/CatPadre/CatHijo\"],\r\n    \"resp\": [\"5\",\"99999\",\"855\",\"6\",\"4\"],\r\n    \"ans\": [\"4\"],\r\n    \"obs\": \"Esto es una observación que sólo se verà al revisar las respuestas de un examen\"\r\n},\r\n{\r\n    \"enun\": \"Ultima pregunta: como estas?\",\r\n    \"cat\":[\"Prueba3/Psicologia\",\"CatPadre/CatHijo\",\"CatAbuelo/CatPadre/CatHijo\"],\r\n    \"resp\": [\"Bien\",\"Genial\",\"Normal\",\"Content@\",\"Interesada\"],\r\n    \"ans\": [\"Genial\",\"Content@\"],\r\n    \"obs\": \"Podriamos dejar este campo en blanco si quisieramos o no añadirlo.\"\r\n}]`}\r\n                </pre>\r\n            </StickyPaper>\r\n        </div>\r\n        <li><Typography variant=\"body1\" gutterBottom>Examinate de las categorias que quieras en el apartado <Link component={RLink} to=\"/examen\">Hacer Examen</Link></Typography></li>\r\n        <li><Typography variant=\"body1\" gutterBottom>Si quieres modificar o deshacerte de alguna pregunta, el apartado <Link component={RLink} to=\"/preguntas/gestionar\">Gestionar Preguntas</Link> te va a ayudar a ello!</Typography></li>\r\n        <li><Typography variant=\"body1\" gutterBottom>Finalmente, vas a encontrar tus resultados en <Link component={RLink} to=\"/yo\">Mis Cosas</Link></Typography></li>\r\n        <Typography variant=\"h5\" style={{ textAlign: 'center', marginTop: 20 }} gutterBottom> A <span style={{ textDecoration: 'line-through'}}>DISFRUTAR</span> <strong>ESTUDIAR</strong>! </Typography>\r\n        </ol>\r\n    </div>)\r\n}","import { Button, createStyles, makeStyles, TextField, Theme, Typography, Chip, Link, FormControl, IconButton, InputAdornment, InputLabel, OutlinedInput } from '@material-ui/core';\r\nimport React from 'react';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport StickyPaper from '../components/StickyPaper';\r\nimport { DBManager, useCategories } from '../dbmanager';\r\nimport { Question } from '../types';\r\nimport { useStruct } from '../components/customHooks';\r\nimport { HighlightOff, Beenhere, TurnedInNot } from '@material-ui/icons';\r\nconsole.log('DBMANAGER:', DBManager);\r\nconst useStyles = makeStyles((theme: Theme) => createStyles({\r\n    root: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        height: '100'\r\n    },\r\n    flform: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        margin: '10px 0',\r\n        '&>.with-margin>*': {\r\n            margin: 10\r\n        },\r\n        '&>:not(.with-margin)': {\r\n            margin: 10\r\n        }\r\n    }\r\n}));\r\n\r\nexport default function Create({ isSmall, setSnack }: { isSmall: boolean, setSnack: React.Dispatch<any> }) {\r\n    const classes = useStyles(),\r\n        file = React.useRef<HTMLInputElement>(null),\r\n        categories = useCategories(),\r\n        [importTry, setIT] = React.useState(''),\r\n        [importLoad, setIL] = React.useState(true),\r\n        [createTry, setCT] = React.useState(false),\r\n        [newQ, setNewQ] = useStruct({ enun: '', cat: [], resp: [], ans: [], obs: '' });\r\n\r\n    const handleImport = async (e: React.FormEvent) => {\r\n        e.preventDefault();\r\n        if (!file?.current?.files?.[0]) return setIT('No file selected');\r\n        setIL(true);\r\n        console.log('to read');\r\n        let reader = new FileReader();\r\n        reader.readAsText(file.current.files[0]);\r\n        reader.onload = async (ev: any) => {\r\n            console.log('loaded');\r\n            let filestr = ev.target.result;\r\n            try {\r\n                filestr = JSON.parse(filestr);\r\n                if (!Array.isArray(filestr)) throw 'Base is not array';\r\n                let i = 0, e: any;\r\n                while (i < filestr.length) {\r\n                    e = filestr[i];\r\n                    if (typeof e.enun !== 'string' || e.enun.length === 0)\r\n                        throw `Attribute \"enun\" del elemento ${i + 1} invalido`;\r\n                    else if (!Array.isArray(e.cat) || e.cat.length === 0 || e.cat.find((el: any) => typeof el !== 'string'))\r\n                        throw `Atributo \"cat\" del elemento ${i + 1} invalido`;\r\n                    else if (!Array.isArray(e.resp) || e.resp.length === 0 || e.resp.find((el: any) => typeof el !== 'string'))\r\n                        throw `Atributo \"resp\" del elemento ${i + 1} invalido`;\r\n                    else if (!Array.isArray(e.ans) || e.ans.length === 0 || e.ans.find((el: any) => typeof el !== 'string' || e.resp.indexOf(el) === -1))\r\n                        throw `Atributo \"ans\" del elemento ${i + 1} invalido`;\r\n                    else if (!e.obs) e.obs = \"\";\r\n                    else if (typeof e.obs !== 'string')\r\n                        throw `Atributo \"obs\" del elemento ${i + 1} invalido`;\r\n                    e.ans = e.ans.map((el: string) => e.resp.indexOf(el)).sort((a: number, b: number) => a - b).join(\"|\");\r\n                    i++;\r\n                }\r\n                //Hem comprovat el fitxer, sembla que està bé, toca importar-lo de veritat\r\n                await DBManager.createQuestions(filestr as Array<Question>);\r\n                setIT('');\r\n                setSnack({ open: true, status: 'success', msg: 'Preguntas añadidas!' });\r\n            }\r\n            catch (e) { setIT('Error: ' + e.toString()); }\r\n            setIL(false);\r\n        }\r\n        reader.onerror = (ev: any) => { setIT('Error: ' + e.toString()); setIL(false); }\r\n    }\r\n\r\n    const handleCreate = async (e: React.FormEvent) => {\r\n        e.preventDefault();\r\n        setCT(true);\r\n        try {\r\n            if (newQ.enun && newQ.cat.length > 0 && newQ.resp.length > 0 && newQ.ans.length > 0) {\r\n                console.log(newQ);\r\n                newQ.ans = newQ.ans.sort((a: number, b: number) => a - b).join(\"|\");\r\n                await DBManager.createQuestions(newQ);\r\n                setSnack({ open: true, status: 'success', msg: 'Pregunta añadida!' });\r\n                setNewQ(null);\r\n            }\r\n        }\r\n        catch (e) { setSnack({ open: true, status: 'error', msg: 'Error: ' + e.toString() }); }\r\n        setCT(false);\r\n    }\r\n\r\n    return (<div className={classes.root}>\r\n        <StickyPaper>\r\n            {!isSmall &&\r\n                <form id=\"import-form\" className={classes.flform} onSubmit={handleImport} autoComplete=\"off\">\r\n                    <Typography variant=\"h6\">Importar preguntas (<Link href=\"/preguntas_modelo.json\" download>ejemplo</Link>)</Typography>\r\n                    <Typography variant=\"body1\" gutterBottom>Si saltan muchos errores y no se te importa, puedes utilizar la herramienta online <Link href=\"https://jsonlint.com/\" target=\"_blank\">JSONlint</Link> para ver que errores hay en que linea</Typography>\r\n                    <div className=\"with-margin\" style={{ display: 'flex' }} >\r\n                        <TextField\r\n                            autoFocus\r\n                            error={!!importTry}\r\n                            helperText={importTry}\r\n                            required\r\n                            type=\"file\"\r\n                            inputRef={file}\r\n                            variant=\"outlined\"\r\n                            label=\"Fichero con preguntas\"\r\n                            onChange={() => !!file?.current?.files?.[0] && setIL(false)}\r\n                            InputLabelProps={{ shrink: true }}\r\n                            inputProps={{ accept: \"application/json\" }}\r\n                            style={{ flex: 1 }}\r\n                        />\r\n                        <Button type=\"submit\" variant=\"contained\" color=\"primary\" disabled={importLoad}>Importar</Button>\r\n                    </div>\r\n                </form>\r\n            }\r\n            {!isSmall && <Typography variant=\"h5\" style={{ textAlign: 'center' }}>O</Typography>}\r\n            <form id=\"create-form\" className={classes.flform} noValidate onSubmit={handleCreate} autoComplete=\"off\">\r\n                <Typography variant=\"h6\">Crear preguntas</Typography>\r\n                <TextField\r\n                    required multiline\r\n                    error={createTry && !newQ.enun}\r\n                    label=\"Enunciado\"\r\n                    value={newQ.enun}\r\n                    onChange={e => setNewQ({ enun: e.target.value })}\r\n                    //className={classes.halfwidth}\r\n                    helperText={createTry && !newQ.enun ? \"Un problema necessita su enunciado\" : \"\"}\r\n                    variant=\"outlined\"\r\n                />\r\n                <Autocomplete\r\n                    freeSolo multiple\r\n                    value={newQ.cat}\r\n                    onChange={(event: any, newValue: Array<string>) => {\r\n                        setNewQ({ cat: newValue });\r\n                    }}\r\n                    options={categories || []}\r\n                    defaultValue={[]}\r\n                    style={{ display: 'flex' }}\r\n                    renderTags={(value: string[], getTagProps: any) =>\r\n                        value.map((option: string, index: number) => (\r\n                            <Chip variant=\"outlined\" label={option} {...getTagProps({ index })} />\r\n                        ))\r\n                    }\r\n                    renderInput={(params) => (\r\n                        <TextField {...params}\r\n                            variant=\"outlined\"\r\n                            label=\"Categorias\"\r\n                            style={{ flex: '1', maxWidth: '100%' }}\r\n                            multiline\r\n                            error={createTry && newQ.cat.length === 0}\r\n                            helperText={createTry && newQ.cat.length === 0 ? \"Introduce al menos una categoria\" : \"\"}\r\n                        />\r\n                    )}\r\n                />\r\n                {newQ.resp.map((el: any, i: number) => (<TextField\r\n                    key={i}\r\n                    required multiline\r\n                    label={\"Respuesta \" + (i + 1)}\r\n                    variant=\"outlined\" size=\"small\"\r\n                    value={el}\r\n                    onChange={e => setNewQ({ resp: (resp: any) => resp[i] = e.target.value })}\r\n                    error={createTry && !el}\r\n                    helperText={createTry && !el ? \"No pueden haber respuestas vacias! Si no te gusta, elimínala\" : \"\"}\r\n                    InputProps={{\r\n                        endAdornment:\r\n                            (<InputAdornment position=\"end\">\r\n                                <IconButton\r\n                                    aria-label=\"Marcar como respuesta correcta\"\r\n                                    onClick={() => setNewQ({\r\n                                        ans: (ans: any) => {\r\n                                            let pos = ans.indexOf(i);\r\n                                            pos === -1 ? ans.push(i) : ans.splice(pos, 1);\r\n                                        }\r\n                                    })}\r\n                                    edge=\"start\"\r\n                                >\r\n                                    {newQ.ans.indexOf(i) !== -1 ? <Beenhere style={{ color: '#00c100' }} /> : <TurnedInNot />}\r\n                                </IconButton>\r\n                                <IconButton\r\n                                    aria-label=\"Eliminar respuesta\"\r\n                                    onClick={() => setNewQ({\r\n                                        ans: (ans: any) => {\r\n                                            let pos = ans.indexOf(i);\r\n                                            pos !== -1 && ans.splice(pos, ans.index);\r\n                                        },\r\n                                        resp: (resp: any) => resp.splice(i, 1)\r\n                                    })}\r\n                                    edge=\"end\"\r\n                                >\r\n                                    <HighlightOff />\r\n                                </IconButton>\r\n                            </InputAdornment>)\r\n                    }}\r\n                />))}\r\n                <Button variant=\"outlined\"\r\n                    color=\"primary\"\r\n                    style={{ width: 'fit-content', margin: 10 }}\r\n                    onClick={() => setNewQ({ resp: (resp: any) => resp.push(\"\") })}>\r\n                    Añadir respuesta\r\n                </Button>\r\n                <TextField\r\n                    multiline\r\n                    label=\"Observaciones\"\r\n                    value={newQ.obs}\r\n                    onChange={e => setNewQ({ obs: e.target.value })}\r\n                    variant=\"outlined\"\r\n                />\r\n                <Button type=\"submit\" variant=\"contained\" color=\"primary\" style={{ width: 'fit-content', alignSelf: 'center' }}>Crear</Button>\r\n            </form>\r\n        </StickyPaper>\r\n    </div>);\r\n}","import { Button, createStyles, makeStyles, TextField, Theme, Typography, Chip, MenuItem, Link, Backdrop, CircularProgress } from '@material-ui/core';\r\nimport React from 'react';\r\nimport { Link as RLink, useHistory } from 'react-router-dom';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport StickyPaper from '../components/StickyPaper';\r\nimport { DBManager, useCategories, useCategTree } from '../dbmanager';\r\n//import { CatTree, Exam } from '../types';\r\nimport { useStruct } from '../components/customHooks';\r\n//import { TreeItem, TreeView } from '@material-ui/lab';\r\n//import { ExpandMore, ChevronRight } from '@material-ui/icons';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => createStyles({\r\n    root: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        height: '100%'\r\n    },\r\n    paper: {\r\n        maxHeight: '40vh',\r\n        overflow: 'auto'\r\n    },\r\n    flform: {\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        margin: '10px 0',\r\n        '&>.with-margin>*': {\r\n            margin: 10\r\n        },\r\n        '&>:not(.with-margin)': {\r\n            margin: 10\r\n        }\r\n    },\r\n    /*rootCategory: {\r\n        color: theme.palette.text.secondary,\r\n        '&:hover > *': {\r\n            backgroundColor: theme.palette.action.hover,\r\n        },\r\n        '&:focus > *, &:$selected > *': {\r\n            backgroundColor: theme.palette.grey[400],\r\n            color: '#1a73e8',\r\n        },\r\n        '&:focus > * > $categoryLabel, &:hover > * > $categoryLabel, &$selected > * > $categoryLabel': {\r\n            backgroundColor: 'transparent',\r\n        },\r\n    },\r\n    categoryLabel: {\r\n        display: 'flex',\r\n        '&>p': {\r\n            flex: 1,\r\n            alignSelf: 'center'\r\n        }\r\n    },\r\n    content: {\r\n        color: theme.palette.text.secondary,\r\n        borderTopRightRadius: theme.spacing(2),\r\n        borderBottomRightRadius: theme.spacing(2),\r\n        paddingRight: theme.spacing(1),\r\n        fontWeight: theme.typography.fontWeightMedium,\r\n        '$expanded > &': {\r\n            fontWeight: theme.typography.fontWeightRegular,\r\n        },\r\n    },\r\n    group: {\r\n        marginLeft: 0,\r\n        '& $content': {\r\n            paddingLeft: theme.spacing(2),\r\n        },\r\n    },\r\n    expanded: {},\r\n    selected: {},\r\n    label: {\r\n        fontWeight: 'inherit',\r\n        color: 'inherit',\r\n    },*/\r\n    backdrop: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        color: '#fff',\r\n    },\r\n}));\r\n\r\nexport default function CreateExam({ setSnack }: { setSnack: React.Dispatch<any> }) {\r\n    const classes = useStyles(),\r\n        categories = useCategories(),\r\n        history = useHistory(),\r\n        //cattree = useCategTree(),\r\n        [loading, setL] = React.useState(false),\r\n        [startTry, setST] = React.useState(false),\r\n        [modN, setModN] = useStruct({ time: false, qtime: false }),\r\n        [newE, setNewE] = useStruct({ qnum: 10, time: '', qtime: '', randtype: 'true_random', cat: [], que:[], qpans:[], ans:[], res:[] });\r\n    \r\n    const handleStartExam = async (e: React.FormEvent) => {\r\n        e.preventDefault();\r\n        setST(true);\r\n        try {\r\n            if (newE.qnum && newE.time > 0 && newE.randtype && newE.cat.length > 0) {\r\n                //Afegir el que falti\r\n                setL(true);\r\n                console.log(newE);\r\n                let id = await DBManager.createExam(newE);\r\n                if (id) return history.push(`/examen/${id}/1`);\r\n                else throw Error('There was an exception creating the exam'); //33ecd6d43a31c1\r\n                /*setNewE(null);\r\n                setST(false);*/\r\n            }\r\n        } catch (e) { \r\n            console.error(e);\r\n            setSnack({ open: true, status: 'error', msg: 'Error: ' + e.toString() }); \r\n        }\r\n        setL(false);\r\n    }\r\n\r\n    const setExamTime = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const v = e.target.value;\r\n        setModN({ time: !!v });\r\n        setNewE({ time: v ? +v * 60000 : '', qtime: (modN.qtime && newE.qtime) || !v ? null : Math.floor((+v * 60000) / newE.qnum) });\r\n    };\r\n\r\n    const setQuestionTime = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        const v = e.target.value;\r\n        setModN({ qtime: !!v });\r\n        setNewE({ qtime: v ? +v * 1000 : '', time: (modN.time && newE.time) || !v ? null : (+v * 1000 * newE.qnum) });\r\n    };\r\n\r\n    /*const selectCategories = (id:string)=>(e: ChangeEvent)=>{\r\n        e.preventDefault();\r\n        setNewE({ cat: (cat:string[])=>{\r\n            let i = cat.indexOf(id);\r\n            i === -1 ? cat.push(id) : cat.splice(i,1);\r\n        }})\r\n    }\r\n\r\n    const renderTree = (nodes: CatTree, id: string, name: string) => {\r\n        const keys = Object.keys(nodes),\r\n            hasSons = keys.length > 1,\r\n            hasSelSons = hasSons && !!keys.find(k=>k!==\"__nq\" && newE.cat.indexOf(k) !== -1),\r\n            hasNoSelSons = hasSons && !!keys.find(k=>k!==\"__nq\" && newE.cat.indexOf(k) === -1),\r\n            checked = newE.cat.indexOf(id) !== -1 || (hasSons && !hasNoSelSons);\r\n        //console.log('nodes.id: ', id, ' nodes.name: ', name, 'nodes.children: ', keys, ' cattree:', cattree);\r\n        return (\r\n            <TreeItem key={id} nodeId={id} label={<div className={classes.categoryLabel}>\r\n                { id !== 'root' && <Checkbox checked={checked} indeterminate={hasSelSons && hasNoSelSons} onChange={selectCategories(id)} />}\r\n                <Typography variant=\"body1\">{name}</Typography>\r\n            </div>}>\r\n                {keys.length <= 1 ? null : keys.map(k => (k !== \"__nq\" && renderTree(nodes[k] as CatTree, (id === 'root' ? '' : id + '/') + k, k)))}\r\n            </TreeItem>\r\n        );\r\n    };*/\r\n\r\n    return (<div className={classes.root}>\r\n        <StickyPaper>\r\n            {!!categories && categories.length > 0\r\n                ? (<form id=\"doexam-form\" className={classes.flform} onSubmit={handleStartExam} autoComplete=\"off\">\r\n                    <Typography variant=\"h6\">Configura tu examen y ya puedes empezar!</Typography>\r\n                    <Autocomplete\r\n                        freeSolo multiple\r\n                        value={newE.cat}\r\n                        onChange={(event: any, newValue: Array<string>) => {\r\n                            setNewE({ cat: newValue });\r\n                        }}\r\n                        options={categories}\r\n                        defaultValue={[]}\r\n                        style={{ display: 'flex' }}\r\n                        renderTags={(value: string[], getTagProps: any) =>\r\n                            value.map((option: string, index: number) => (\r\n                                <Chip variant=\"outlined\" label={option} {...getTagProps({ index })} />\r\n                            ))\r\n                        }\r\n                        renderInput={(params) => (\r\n                            <TextField {...params}\r\n                                variant=\"outlined\"\r\n                                label=\"Categorias\"\r\n                                style={{ flex: '1', maxWidth: '100%' }}\r\n                                multiline\r\n                                error={startTry && newE.cat.length === 0}\r\n                                helperText={startTry && newE.cat.length === 0 ? \"Introduce al menos una categoria\" : \"\"}\r\n                            />\r\n                        )}\r\n                    />\r\n                    {/*<Paper className={classes.paper}>\r\n                    <TreeView\r\n                        defaultCollapseIcon={<ExpandMore />}\r\n                        defaultExpanded={['root']}\r\n                        defaultExpandIcon={<ChevronRight />}\r\n                    >\r\n                        {renderTree(cattree, 'root', 'Categorias')}\r\n                    </TreeView>\r\n                    </Paper>*/}\r\n                    <TextField\r\n                        select disabled\r\n                        variant=\"outlined\"\r\n                        label=\"Modo elección de preguntas\"\r\n                        value={newE.randtype}\r\n                        onChange={(e) => setNewE({ randtype: e.target.value })}\r\n                    >\r\n                        <MenuItem value=\"equal_split\">Proporcional entre categorias</MenuItem>\r\n                        <MenuItem value=\"proportional\">Segun número de preguntas en categoria</MenuItem>\r\n                        <MenuItem value=\"true_random\">Totalmente aleatorio</MenuItem>\r\n                    </TextField>\r\n                    <TextField\r\n                        label=\"Número de preguntas\"\r\n                        type=\"number\"\r\n                        variant=\"outlined\"\r\n                        error={startTry && !newE.qnum}\r\n                        value={newE.qnum}\r\n                        onChange={(e) => setNewE({ qnum: e.target.value })}\r\n                        InputLabelProps={{ shrink: true }}\r\n                    />\r\n                    <TextField\r\n                        label=\"Duración del test (minutos)\"\r\n                        type=\"number\"\r\n                        variant=\"outlined\"\r\n                        error={startTry && !newE.time}\r\n                        value={newE.time && newE.time / 60000}\r\n                        onChange={setExamTime}\r\n                        InputLabelProps={{ shrink: true }}\r\n                    />\r\n                    <TextField\r\n                        label=\"Duración de pregunta (segundos)\"\r\n                        type=\"number\"\r\n                        variant=\"outlined\"\r\n                        error={startTry && !newE.qtime}\r\n                        value={newE.qtime && newE.qtime / 1000}\r\n                        onChange={setQuestionTime}\r\n                        InputLabelProps={{ shrink: true }}\r\n                    />\r\n                    <Button type=\"submit\" variant=\"contained\" color=\"primary\" style={{ width: 'fit-content', alignSelf: 'center' }}>Empezar!</Button>\r\n                </form>)\r\n                : (<div>\r\n                    <Typography variant=\"h6\">Faltan preguntas!</Typography>\r\n                    <Typography variant=\"body1\" gutterBottom>Introduce tus preguntas (o importalas en formato JSON) en el apartado <Link component={RLink} to=\"/preguntas/crear\">Crear Preguntas</Link></Typography>\r\n                </div>)\r\n            }\r\n        </StickyPaper>\r\n        <Backdrop className={classes.backdrop} open={loading || !categories}>\r\n            <CircularProgress color=\"secondary\" />\r\n        </Backdrop>\r\n    </div>);\r\n}","import { Button, createStyles, makeStyles, TextField, Theme, Typography, Chip, MenuItem, Link, CircularProgress, Checkbox, FormControl, FormControlLabel, FormGroup, FormHelperText, IconButton, Tooltip } from '@material-ui/core';\r\nimport React, { useEffect } from 'react';\r\nimport { Link as RLink, useHistory, useParams } from 'react-router-dom';\r\nimport StickyPaper from '../components/StickyPaper';\r\nimport { DBManager } from '../dbmanager';\r\nimport { AssignmentTurnedIn, Assistant, ChevronLeft, ChevronRight } from '@material-ui/icons';\r\n//import { TreeItem, TreeView } from '@material-ui/lab';\r\n//import { ExpandMore, ChevronRight } from '@material-ui/icons';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => createStyles({\r\n    root: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        height: '100%'\r\n    },\r\n    paper: {\r\n        [theme.breakpoints.up('md')]: {\r\n            minWidth: '50%'\r\n        },\r\n        minWidth: '100%'\r\n    },\r\n    questions: {\r\n        display: 'flex',\r\n        flexDirection: 'column'\r\n    },\r\n    errdiv: {\r\n        textAlign: 'center',\r\n        '&>h1': {\r\n            fontFamily: 'monospace'\r\n        }\r\n    },\r\n    formControl: {\r\n        margin: theme.spacing(3),\r\n    },\r\n    topProgress: {\r\n        position: 'absolute'\r\n    }\r\n}));\r\n\r\nconst shuffle = (array: any[]) => {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n        let j = Math.floor(Math.random() * (i + 1));\r\n        [array[i], array[j]] = [array[j], array[i]];\r\n    }\r\n    return array;\r\n}\r\n\r\nconst msToString = (time: number) => {\r\n    let diff = (Date.now() - time) / 1000;\r\n    // calculate (and subtract) whole hours\r\n    const hours = Math.floor(diff / 3600); //% 24;\r\n    diff -= hours * 3600;\r\n\r\n    // calculate (and subtract) whole minutes\r\n    const mins = Math.floor(diff / 60) % 60;\r\n    diff -= mins * 60;\r\n\r\n    // calulate whole seconds (leave millis)\r\n    const secs = Math.floor(diff % 60);\r\n    return `${hours > 99 ? hours : (\"00\" + hours).slice(-2)}:${(\"00\" + mins).slice(-2)}:${(\"00\" + secs).slice(-2)}`;\r\n}\r\n\r\nexport default function ExamQuestion({ setSnack }: { setSnack: React.Dispatch<any> }) {\r\n    const classes = useStyles(),\r\n        history = useHistory(),\r\n        [error, setError] = React.useState(''),\r\n        [exam, setExam] = React.useState<any>({}),\r\n        [ans, setAnswer] = React.useState<any[]>([]), //Array de Respostes possibles barrejades\r\n        [res, setResp] = React.useState<string[]>([]), //Array de solucions seleccionades\r\n        [question, setQuestion] = React.useState<any>({}),\r\n        [time, setTime] = React.useState<any>({ etxt: \"Exam Time: X\", qtxt: \"Question Time: Y\", qtime: 0, etime: 0, ended: false }),\r\n        startQ = React.useRef<number>(Date.now()),\r\n        interval = React.useRef<any>(NaN),\r\n        { id, index } = useParams<{ id: string, index: string }>();\r\n\r\n    useEffect(() => {\r\n        let tellError = (e: any) => { console.error(e); setError(e.toString()); }\r\n        try {\r\n            //console.log('Fetching Question data: ', exam, question,id,index);\r\n            setError('');\r\n            if (!exam.id || exam.id !== id) //Load exam\r\n                DBManager.getExam(id)\r\n                    .then(ex => {\r\n                        if (!ex) throw 'Can\\'t get Exam - Is the ID correct?';\r\n                        setExam(ex);\r\n                        return ex;\r\n                    })\r\n                    .then(ex => {\r\n                        if (+index < 0 || +index > ex.que.length)\r\n                            throw 'Index Out Of Bounds';\r\n                        return (!question.id || question.id !== ex.que[+index - 1])\r\n                            ? DBManager.getQuestion(ex.que[+index - 1])\r\n                            : question;\r\n                    })\r\n                    .then(q => q ? setQuestion(q) : setError('Can\\'t get Question - Is the ID correct?'))\r\n                    .catch(tellError);\r\n\r\n            if (exam.id) {\r\n                if (+index < 0 || +index > exam.que.length) throw 'Index Out Of Bounds';\r\n                else if (!question.id || question.id !== exam.que[+index - 1])\r\n                    DBManager.getQuestion(exam.que[+index - 1])\r\n                        .then(q => q ? setQuestion(q) : setError('Can\\'t get Question - Is the ID correct?'))\r\n                        .catch(tellError);\r\n            }\r\n        } catch (e) {\r\n            tellError(e);\r\n        }\r\n    }, [id, index]);\r\n\r\n    useEffect(() => {\r\n        if (exam.id) setResp(exam.res[+index - 1] ? exam.res[+index - 1].split(\"|\") : []);\r\n        else setResp([]);\r\n        if (question.id) {\r\n            let r = question.resp.map((r: string, i: number) => [r, i.toString()]);\r\n            if (exam.end || Date.now() > (exam.start + exam.time)) {\r\n                setTime({ txt: 'Exam Ended', qtime: 0, etime: 0, ended: true })\r\n                setAnswer(r);\r\n            }\r\n            else { //Establim el temps només si l'examen no ha acabat\r\n                setAnswer(shuffle(r));\r\n                startQ.current = Date.now();\r\n                if (!isNaN(interval.current)) clearInterval(interval.current);\r\n                let intv = setInterval(timeSetting, 1000);\r\n                interval.current = intv;\r\n            }\r\n        }\r\n        else {\r\n            setAnswer([]);\r\n            if (!isNaN(interval.current)) clearInterval(interval.current);\r\n            interval.current = NaN;\r\n        }\r\n    }, [question]);\r\n\r\n    const timeSetting = () => {\r\n        if (!exam.id || !question.id) return;\r\n        let ended = !exam.end && Date.now() > (exam.start + exam.time);\r\n        if (ended) {\r\n            console.log('time seems ended', ended);\r\n            setTime({ txt: 'Exam Ended', qtime: 0, etime: 0, ended: true });\r\n            if (!isNaN(interval.current)) clearInterval(interval.current);\r\n            interval.current = NaN;\r\n            return;\r\n        }\r\n        let now = Date.now();\r\n        setTime({\r\n            etxt: 'Exam Time: ' + msToString(+exam.start),\r\n            qtxt: 'Question Time: ' + msToString(startQ.current),\r\n            etime: Math.min(Math.ceil((now - exam.start) * 100 / exam.time), 100),\r\n            qtime: Math.min(Math.floor((now - startQ.current) * 100 / exam.qtime), 100),\r\n            ended\r\n        });\r\n    }\r\n\r\n    const toggleResp = (index: string) => () => {\r\n        let idx = res.indexOf(index),\r\n            result = [];\r\n\r\n        if (idx === -1) result = [...res, index];\r\n        else {\r\n            result = [...res];\r\n            result.splice(idx, 1);\r\n        }\r\n        saveAnsToDB(result);\r\n        setResp(result);\r\n    };\r\n\r\n    const saveAnsToDB = (result:Array<string>) => {\r\n        return DBManager.saveAnswer(exam, +index-1, result.sort((a: string, b: string) => (+a) - (+b)).join('|'))\r\n            .catch(e => setSnack({ open: true, status: 'error', msg: 'Error en guardado de la pregunta en DB:\\n' + e.toString() }));\r\n    };\r\n\r\n    const endExam = async () => {\r\n        try {\r\n            await DBManager.endExam(exam);\r\n            history.push('/examen/' + exam.id);\r\n        }\r\n        catch (e) { setSnack({ open: true, status: 'error', msg: 'Error en acabar examen:\\n' + e.toString() }) };\r\n    }\r\n\r\n    const paintResults = (i: string) => {\r\n        if (time.ended) {\r\n            const sep = '|',\r\n                examans = sep + exam.ans[+index - 1] + sep,\r\n                resptrue = res.indexOf(i) !== -1,\r\n                anstrue = examans.indexOf(sep + i + sep) !== -1;\r\n            if ( res.length === 0){\r\n                if (anstrue) return { backgroundColor: '#ff980080' };\r\n            }\r\n            else if (resptrue && anstrue) return { backgroundColor: '#4caf5080' };\r\n            else if ((resptrue && !anstrue) || (!resptrue && anstrue)) return { backgroundColor: '#f4433680' };\r\n        }\r\n        return undefined;\r\n    }\r\n\r\n    return (<div className={classes.root}>\r\n        <StickyPaper className={(time.ended ? 'colorful-disabled ' : '') + classes.paper}>\r\n            {error\r\n                ? (<div className={classes.errdiv}>\r\n                    <Typography variant=\"h1\">404</Typography>\r\n                    <Typography variant=\"body1\" gutterBottom>{error}</Typography>\r\n                </div>)\r\n                : (exam.id && question.id\r\n                    ? (<div className={classes.questions}>\r\n                        <Typography variant=\"h6\">Pregunta {index} de {exam.que.length}</Typography>\r\n                        <Typography variant=\"body1\" gutterBottom>{question.enun}</Typography>\r\n                        <FormControl component=\"fieldset\" className={classes.formControl} disabled={time.ended}>\r\n                            <FormGroup>\r\n                                {ans.map((el: any[]) => (<FormControlLabel key={el[1]}\r\n                                    style={paintResults(el[1])}\r\n                                    control={<Checkbox checked={res.indexOf(el[1]) !== -1}\r\n                                        onChange={toggleResp(el[1])}\r\n                                        name={'resp_' + el[1]} />}\r\n                                    label={el[0]} />))}\r\n                            </FormGroup>\r\n                        </FormControl>\r\n                        {time.ended && !!question.obs && (<TextField\r\n                            style={{ marginBottom: 10 }}\r\n                            multiline disabled\r\n                            label=\"Observaciones\"\r\n                            value={question.obs}\r\n                            variant=\"outlined\"\r\n                        />)}\r\n                        <div className={classes.root} style={{ justifyContent: 'space-evenly' }}>\r\n                            <Tooltip title=\"Pregunta Anterior\">\r\n                                <IconButton disabled={index === \"1\"} color=\"default\" edge=\"start\" component={RLink} to={`/examen/${id}/${+index - 1}`} ><ChevronLeft /></IconButton>\r\n                            </Tooltip>\r\n                            {time.ended\r\n                                ? (<Tooltip title=\"Resumen del Examen\">\r\n                                    <IconButton color=\"default\" component={RLink} to={`/examen/${id}`}><Assistant /></IconButton>\r\n                                </Tooltip>)\r\n                                : (<div className={classes.root}>\r\n                                    <Tooltip title={time.etxt}>\r\n                                        <CircularProgress color=\"primary\" size={80} thickness={20} variant=\"determinate\" value={time.etime} />\r\n                                    </Tooltip>\r\n                                    <Tooltip title={time.qtxt}>\r\n                                        <CircularProgress className={classes.topProgress} color=\"secondary\" size={40} thickness={20} variant=\"determinate\" value={time.qtime} />\r\n                                    </Tooltip>\r\n                                </div>)\r\n                            }\r\n                            {+index === exam.que.length && !time.ended\r\n                                ? (<Tooltip title=\"Acabar Examen\">\r\n                                    <IconButton color=\"default\" edge=\"end\" onClick={endExam} ><AssignmentTurnedIn /></IconButton>\r\n                                </Tooltip>)\r\n                                : (<Tooltip title=\"Pregunta Siguiente\">\r\n                                    <IconButton disabled={+index === exam.que.length} color=\"default\" edge=\"end\" component={RLink} to={`/examen/${id}/${+index + 1}`} ><ChevronRight /></IconButton>\r\n                                </Tooltip>)}\r\n                        </div>\r\n                    </div>)\r\n                    : (<CircularProgress color=\"secondary\" />))\r\n            }\r\n        </StickyPaper>\r\n    </div>);\r\n}","import { createStyles, makeStyles, Theme, Typography, Link, Paper, Button } from '@material-ui/core';\r\nimport React, { useEffect } from 'react';\r\nimport { Link as RLink, useParams } from 'react-router-dom';\r\nimport StickyPaper from '../components/StickyPaper';\r\nimport { DBManager } from '../dbmanager';\r\nimport { Exam } from '../types';\r\n//import { TreeItem, TreeView } from '@material-ui/lab';\r\n//import { ExpandMore, ChevronRight } from '@material-ui/icons';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => createStyles({\r\n    root: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        height: '100%'\r\n    },\r\n    question: {\r\n        display: 'inline-flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        height: 40,\r\n        width: 40,\r\n        margin: 10\r\n    },\r\n    mark: {\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    },\r\n    counting: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between'\r\n    }\r\n}));\r\n\r\nexport default function ExamSummary({ setSnack }: { setSnack: React.Dispatch<any> }) {\r\n    const classes = useStyles(),\r\n        [exam, setExam] = React.useState<Exam>(),\r\n        [results, setResults] = React.useState({ good: 0, bad: 0, empty: 0, mark: 0 }),\r\n        { id } = useParams<{ id: string, index: string }>();\r\n\r\n    useEffect(() => {\r\n        DBManager.getExam(id)\r\n            .then(e => {\r\n                setExam(e);\r\n                calculateMark(e);\r\n            })\r\n            .catch(err => {\r\n                setSnack({ open: true, status: 'error', msg: 'Error en obtener examen:\\n' + err.toString() });\r\n                //history.push('/yo'); //Per a quan estigui fet l'apartat \"jo\"\r\n            });\r\n    }, [id]);\r\n\r\n    const calculateMark = (e: Exam) => {\r\n        let good = 0, bad = 0, empty = 0, badp = 0;\r\n        e.res.forEach((res, i) => {\r\n            if (res === e.ans[i]) good++;\r\n            else if (res) {\r\n                bad++;\r\n                badp += 1 / (e.qpans[i] - 1);\r\n            }\r\n            else empty++;\r\n        });\r\n        return setResults({\r\n            //nota_sobre_10 = 10 * ((encerts - (errors/n possibles respostes))/quant.preguntes)\r\n            mark: (10 * ((good - badp) / e.ans.length)),\r\n            good, bad, empty\r\n        });\r\n    };\r\n\r\n    const addCategoryToFailed = ()=>{\r\n        if (!exam) return;\r\n        const failedqs = exam.res.reduce((t,v,i)=>{\r\n            if (v && v !== exam.ans[i]) t.push(exam.que[i]);\r\n            return t;\r\n        },[] as string[])\r\n        DBManager.addCategoryToQuestion(failedqs,\"falladas\")\r\n            .then(()=>setSnack({ open: true, status: 'success', msg: 'Preguntas añadidas correctamente' }))\r\n            .catch(err=>setSnack({ open: true, status: 'error', msg: 'Error en añadir preguntas:\\n' + err.toString() }));\r\n    }\r\n\r\n    return (<div className={classes.root}>\r\n        <StickyPaper>\r\n            <Typography variant=\"h6\" gutterBottom>Examen del {exam && (new Date(exam.start).toLocaleDateString('es-ES', { weekday: 'long', day: 'numeric', month: 'numeric', year: 'numeric', hour: 'numeric', minute: 'numeric' }))}</Typography>\r\n            <Typography variant=\"body1\" gutterBottom className={classes.mark}>\r\n                <span>Nota: <strong>{results.mark} / 10</strong></span>\r\n            </Typography>\r\n            <Typography variant=\"body1\" gutterBottom className={classes.counting}>\r\n                <span>Aciertos: <strong>{results.good}</strong></span>\r\n                <span>Fallos: <strong>{results.bad}</strong></span>\r\n                <span>En blanco: <strong>{results.empty}</strong></span>\r\n            </Typography>\r\n            <div>{exam?.res.map((res, i) => (<Link key={i} component={RLink} underline=\"none\" to={`/examen/${id}/${i + 1}`}><Paper elevation={4} className={classes.question} style={{ backgroundColor: res ? (res === exam.ans[i] ? '#4caf50' : '#f44336') : '#ff9800' }}><Typography variant=\"h6\">{i + 1}</Typography></Paper></Link>))}</div>\r\n            { results.bad > 0 && (<div>\r\n                <Button variant=\"outlined\"\r\n                    color=\"primary\"\r\n                    style={{ width: 'fit-content', margin: 10 }}\r\n                    onClick={addCategoryToFailed}>\r\n                    Añadir preguntas falladas a categoria \"falladas\"\r\n                </Button>\r\n            </div>) }\r\n        </StickyPaper>\r\n    </div>);\r\n}","import { createStyles, makeStyles, Theme, Typography, Link, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow, IconButton } from '@material-ui/core';\r\nimport { Visibility } from '@material-ui/icons';\r\nimport React, { useEffect } from 'react';\r\nimport { Link as RLink, useParams } from 'react-router-dom';\r\nimport StickyPaper from '../components/StickyPaper';\r\nimport { DBManager } from '../dbmanager';\r\nimport { Exam } from '../types';\r\n//import { TreeItem, TreeView } from '@material-ui/lab';\r\n//import { ExpandMore, ChevronRight } from '@material-ui/icons';\r\n\r\nconst useStyles = makeStyles((theme: Theme) => createStyles({\r\n    root: {\r\n        display: 'flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        height: '100%'\r\n    },\r\n    question: {\r\n        display: 'inline-flex',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n        height: 40,\r\n        width: 40,\r\n        margin: 10\r\n    },\r\n    mark: {\r\n        display: 'flex',\r\n        justifyContent: 'center'\r\n    },\r\n    counting: {\r\n        display: 'flex',\r\n        justifyContent: 'space-between'\r\n    }\r\n}));\r\n\r\nexport default function ExamView({ setSnack }: { setSnack: React.Dispatch<any> }) {\r\n    const classes = useStyles(),\r\n        [exams, setExams] = React.useState<Exam[]>(),\r\n        [results, setResults] = React.useState({ good: 0, bad: 0, empty: 0, mark: 0 }),\r\n        { id } = useParams<{ id: string, index: string }>();\r\n\r\n    useEffect(() => {\r\n        DBManager.getExams()\r\n            .then(e =>\r\n                setExams(e.map(exam => { exam.result = calculateMark(exam); return exam; }))\r\n            )\r\n            .catch(err => {\r\n                setSnack({ open: true, status: 'error', msg: 'Error en obtener examen:\\n' + err.toString() });\r\n                //history.push('/yo'); //Per a quan estigui fet l'apartat \"jo\"\r\n            });\r\n    }, []);\r\n\r\n    const calculateMark = (e: Exam) => {\r\n        let good = 0, bad = 0, empty = 0, badp = 0;\r\n        e.res.forEach((res, i) => {\r\n            if (res === e.ans[i]) good++;\r\n            else if (res) {\r\n                bad++;\r\n                badp += 1 / (e.qpans[i] - 1);\r\n            }\r\n            else empty++;\r\n        });\r\n        return {\r\n            //nota_sobre_10 = 10 * ((encerts - (errors/n possibles respostes))/quant.preguntes)\r\n            mark: (10 * ((good - badp) / e.ans.length)),\r\n            good, bad, empty\r\n        };\r\n    }\r\n\r\n    return (<div className={classes.root}>\r\n        <TableContainer component={Paper}>\r\n            <Table aria-label=\"exam table\">\r\n                <TableHead>\r\n                    <TableRow>\r\n                        <TableCell>ID</TableCell>\r\n                        <TableCell>Date</TableCell>\r\n                        <TableCell align=\"right\">Mark</TableCell>\r\n                        <TableCell align=\"center\">View</TableCell>\r\n                    </TableRow>\r\n                </TableHead>\r\n                <TableBody>\r\n                    {exams?.map((e) => (\r\n                        <TableRow key={e.id}>\r\n                            <TableCell component=\"th\" scope=\"row\">\r\n                                {e.id}\r\n                            </TableCell>\r\n                            <TableCell>{new Date(e.start).toLocaleDateString('es-ES', { weekday: 'long', day: 'numeric', month: 'numeric', year: 'numeric', hour: 'numeric', minute: 'numeric' })}</TableCell>\r\n                            <TableCell align=\"right\">{e.result?.mark} / 10</TableCell>\r\n                            <TableCell align=\"center\">\r\n                            <RLink to={`/examen/${e.id}`}>\r\n                                <IconButton color=\"default\" edge=\"end\" ><Visibility /></IconButton>\r\n                            </RLink>\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    ))}\r\n                </TableBody>\r\n            </Table>\r\n        </TableContainer>\r\n    </div>);\r\n}","import React from 'react';\nimport { createMuiTheme, ThemeProvider } from '@material-ui/core/styles';\nimport { Home, LogIn } from './screens';\nimport { DBManager } from './dbmanager';\nimport { blue, deepOrange } from '@material-ui/core/colors';\nimport './general.css';\nfunction App() {\n    const [darkmode,setDarkMode] = React.useState<boolean>(matchMedia('(prefers-color-scheme: dark)').matches);\n\n    const theme = React.useMemo(\n        () =>\n            createMuiTheme({\n                palette: {\n                    type: darkmode ? 'dark' : 'light',\n                    primary: blue,\n                    secondary: deepOrange\n                },\n            }),\n        [darkmode],\n    );\n    \n    //Check cookie with React.useEffect\n    const [loggedIn,setLoggedIn] = React.useState(false);\n    \n    const handleLogIn = async (apikey:string)=>{\n        if (!apikey) return 'No API Key Specified';\n        const res = await DBManager.login(apikey);\n        //TODO connect with server\n        setLoggedIn(!res);\n        return res;\n    }\n\n    return (\n        <ThemeProvider theme={theme}>\n            { loggedIn \n                ? <Home changeMode={setDarkMode}/>\n                : <LogIn doLogIn={handleLogIn} />\n            }\n        </ThemeProvider>\n    );\n}\n/*\nimport React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}*/\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}